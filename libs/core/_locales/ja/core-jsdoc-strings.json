{
  "AcceleratorRange.EightG": "8Gまでの加速度を測ります。",
  "AcceleratorRange.FourG": "4Gまでの加速度を測ります。",
  "AcceleratorRange.OneG": "1Gまでの加速度を測ります。",
  "AcceleratorRange.TwoG": "2Gまでの加速度を測ります。",
  "Array": "リスト内のアイテムの追加、削除、および置き換えを行います。",
  "Array.filter": "コールバック関数で指定された条件を満たす配列の要素を返します。",
  "Array.filter|param|callbackfn": "最大 2 つの引数を受け取る関数。filter メソッドは配列の各要素に対して 1 回 callbackfn 関数を呼び出します。",
  "Array.get": "指定された位置の値を取得します。",
  "Array.get|param|index": "0 から始まるアイテムのリスト中の位置。たとえば：0",
  "Array.indexOf": "配列内で値が最初に出現する位置を返します。",
  "Array.indexOf|param|fromIndex": "検索を開始する配列の場所。fromIndex を省略した場合、検索は位置 0 から始まります。",
  "Array.indexOf|param|item": "配列内で検索する値。",
  "Array.insertAt": "指定された位置に値を挿入し、配列の長さを 1 つ増やします。",
  "Array.insertAt|param|index": "値を挿入するリスト中の位置を 0 から始まる値で指定します。たとえば：0",
  "Array.insertAt|param|value": "挿入位置。たとえば：0",
  "Array.length": "配列の長さを取得したり設定したりします。これは、配列で定義された最も大きな要素よりも 1 つ大きい数値です。",
  "Array.map": "配列の各要素に対して定義されたコールバック関数を呼び出し、結果を含む配列を返します。",
  "Array.map|param|callbackfn": "最大 2 つの引数を受け取る関数。map メソッドは配列の各要素に対して 1 回ずつ callbackfn 関数を呼び出します。",
  "Array.pop": "配列から最後の要素を削除し、その値を返します。",
  "Array.push": "配列に新しい要素を追加します。",
  "Array.push|param|item": "配列に追加します。",
  "Array.reduce": "配列のすべての要素に対して指定されたコールバック関数を呼び出します。コールバック関数の戻り値は累積した結果となり、次回コールバック関数が呼び出された際の引数として提供されます。",
  "Array.reduce|param|callbackfn": "最大 3 つの引数を受け取る関数。reduce メソッドは配列の各要素に対して 1 回ずつ callbackfn 関数を呼び出します。",
  "Array.reduce|param|initialValue": "累積を開始する初期値。callbackfn 関数の初回呼び出し時にはこの値を配列の値ではなく、引数として提供します。",
  "Array.removeAt": "特定の位置にある要素を削除します。",
  "Array.removeAt|param|index": "値を削除するリスト中の位置を 0 から始まる値で指定します。たとえば：0",
  "Array.removeElement": "オブジェクト内で最初に出現したものを削除します。削除された場合は true を返します。",
  "Array.reverse": "配列に含まれる要素を逆の順番にします。最初の配列要素は最後の要素となり、最後の配列要素は最初の要素となります。",
  "Array.set": "指定された位置に値を格納します。",
  "Array.set|param|index": "値を格納するリスト中の位置を 0 から始まる値で指定します。たとえば：0",
  "Array.shift": "配列から最初の要素を削除し、その値を返します。このメソッドは、配列の長さを変更します。",
  "Array.slice": "配列の一部を返します。",
  "Array.slice|param|end": "配列の指定部分の終了位置。たとえば：0",
  "Array.slice|param|start": "配列の指定部分の開始位置。たとえば：0",
  "Array.sort": "配列の要素を並び替えた後、配列を返します。並び順は必ずしも安定しているとは限りません。",
  "Array.splice": "配列から要素を削除します。",
  "Array.splice|param|deleteCount": "削除する要素の数。たとえば：0",
  "Array.splice|param|start": "要素の削除を開始する配列内の 0 から始まる位置。たとえば：0",
  "Array.unshift": "配列の先頭に要素を 1 つ追加して、配列の新しい長さを返します。",
  "Array.unshift|param|value": "配列の先頭に挿入します。",
  "Boolean.toString": "オブジェクトの文字列表現を返します。",
  "Buffer.fill": "バッファー（のフラグメント）を指定の値で埋めます。",
  "Buffer.getNumber": "バッファーから指定された形式で数値を読み出します。",
  "Buffer.length": "バッファーオブジェクトの長さを返します。",
  "Buffer.rotate": "バッファーを所定の位置に左向きに循環させます。",
  "Buffer.rotate|param|length": "バッファー内の要素の数。負の場合、長さはバッファーの長さから開始オフセットを引いたものに設定されます。たとえば：-1",
  "Buffer.rotate|param|offset": "シフトするバイト数。右にシフトするには負の値を使用します。",
  "Buffer.rotate|param|start": "バッファーの開始オフセット。既定値は 0 です。",
  "Buffer.setNumber": "バッファーに指定された形式で数値を書き込みます。",
  "Buffer.shift": "ゼロ埋めを行い、バッファーを所定の位置に左向きにシフトします。",
  "Buffer.shift|param|length": "バッファー内の要素の数。負の場合、長さはバッファーの長さから開始オフセットを引いたものに設定されます。たとえば：-1",
  "Buffer.shift|param|offset": "シフトするバイト数。右にシフトするには負の値を使用します。",
  "Buffer.shift|param|start": "バッファーの開始オフセット。既定値は 0 です。",
  "Buffer.slice": "バッファーのフラグメントのコピーを返します。",
  "Buffer.write": "`dstOffset` にある `src` の内容を現在のバッファーに書き込みます。",
  "EventCreationMode": "イベントの作成方法。",
  "EventCreationMode.CreateAndFire": "MicroBitEventは初期化され、直後にイベントハンドラーが実行されます（割り込みでの使用には適していません）。",
  "EventCreationMode.CreateOnly": "MicroBitEventは初期化されますが、その他の処理は行われません。",
  "Gesture.EightG": "8Gの衝撃があったときに発生します。",
  "Gesture.FreeFall": "ボードを落としたときに発生します。",
  "Gesture.LogoDown": "画面が垂直で、ロゴの位置が下になったときに発生します。",
  "Gesture.LogoUp": "画面が垂直で、ロゴの位置が上になったときに発生します。",
  "Gesture.ScreenDown": "ボードが水平で、画面が下向きになったときに発生します。",
  "Gesture.ScreenUp": "ボードが水平で、画面が上向きになったときに発生します。",
  "Gesture.Shake": "ボードがゆさぶられたときに発生します。",
  "Gesture.SixG": "6Gの衝撃があったときに発生します。",
  "Gesture.ThreeG": "3Gの衝撃があったときに発生します。",
  "Gesture.TiltLeft": "画面を左に傾けたときに発生します。",
  "Gesture.TiltRight": "画面を右に傾けたときに発生します。",
  "Image.clear": "すべてのピクセルをオフに設定します。",
  "Image.height": "高さを行数で取得します（常に 5）",
  "Image.pixel": "位置 ``(x,y)`` のピクセルの状態を取得します",
  "Image.pixelBrightness": "指定位置のピクセルの明るさ（[0..255]）を取得します",
  "Image.pixel|param|x": "TODO",
  "Image.pixel|param|y": "TODO",
  "Image.plotFrame": "画面上に画像の ``index`` 番目のフレームを描きます。",
  "Image.plotFrame|param|xOffset": "画像の表示を開始する列の位置",
  "Image.plotImage": "画面上の指定の列に画像をプロットします",
  "Image.scrollImage": "画像をスクロールします。",
  "Image.scrollImage|param|frameOffset": "各アニメーションステップで移動する x 方向のオフセット。たとえば：1、2、5",
  "Image.scrollImage|param|interval": "各アニメーションステップ間の時間（ミリ秒単位）。たとえば：200",
  "Image.setPixel": "位置 ``(x,y)`` のピクセルの状態を設定します",
  "Image.setPixelBrightness": "指定位置での特定のピクセルの明るさを設定します",
  "Image.setPixel|param|value": "TODO",
  "Image.setPixel|param|x": "TODO",
  "Image.setPixel|param|y": "TODO",
  "Image.showFrame": "画像片の特定のフレームを表示します。",
  "Image.showFrame|param|frame": "TODO",
  "Image.showImage": "``x 方向のオフセット`` 位置にある画像のフレームを表示します。",
  "Image.showImage|param|xOffset": "画像の表示を開始する列の位置",
  "Image.width": "幅を列数で取得",
  "Math": "より複雑な数値演算を行います。",
  "Math.abs": "数値の絶対値を返します（絶対値とはゼロとの距離です）。たとえば、-5の絶対値は、5の絶対値と同じく「5」です。",
  "Math.pow": "底を指定の指数で累乗した値を返します。",
  "Math.random": "0と「上限の値」の間（両端を含む）の擬似乱数を返します。",
  "Math.randomBoolean": "「真」か「偽」をランダムに生成します。",
  "Math.random|param|limit": "結果の値の上限。たとえば：4",
  "Math.sqrt": "数値の平方根を返します。",
  "Number.toString": "数値の文字列表現を返します。",
  "String": "テキスト文字列の結合、分割、検索を行います。\n\nテキスト文字列の結合、分割、検索を行います。",
  "String.charAt": "指定した位置にある文字を返します。",
  "String.charAt|param|index": "目的の文字の位置を 0 から始まる値で指定します。たとえば：0",
  "String.charCodeAt": "指定された位置にある文字の Unicode 値を返します。",
  "String.compare": "2 つの文字列の文字の順序にどのような違いがあるかを確認してください (ASCII エンコーディングで)。",
  "String.concat|param|other": "文字列の末尾に追加する文字列。たとえば：「add me!」",
  "String.fromCharCode": "指定された文字コードから、その文字コードに相当する文字1文字だけを含む文字列を作ります。",
  "String.length": "文字列オブジェクトの長さを返します。",
  "String.substr": "現在の文字列の部分文字列を返します。",
  "String.substr|param|length": "抽出する文字数。たとえば：3",
  "String.substr|param|start": "最初の文字の位置。負の値を指定すると、末尾から数えることができます。たとえば：0",
  "basic": "micro:bitの基礎的な機能へのアクセスを提供します。",
  "basic.clearScreen": "すべてのLEDをオフにします。",
  "basic.forever": "コードを、ずっとバックグラウンドでくり返します。くり返しの1回ごとに、ほかのコードを実行する時間を与えます。",
  "basic.pause": "ミリ秒で指定された時間、一時停止します。",
  "basic.pause|param|ms": "ひと休みする時間の長さ（ミリ秒）。たとえば：100、200、500、1000、2000",
  "basic.plotLeds": "LED画面に画像を表示します。",
  "basic.plotLeds|param|leds": "点灯・消灯させるLEDのパターン",
  "basic.showAnimation": "LED画面にアニメーションを表示します。",
  "basic.showAnimation|param|interval": "LED画面の描画の間隔（ミリ秒）",
  "basic.showAnimation|param|leds": "点灯・消灯させるLEDのパターン",
  "basic.showArrow": "矢印を表示します。",
  "basic.showArrow|param|direction": "矢印の方向",
  "basic.showArrow|param|interval": "アイコンを表示する時間（ミリ秒）。省略したときの値は600です。",
  "basic.showIcon": "選択されたアイコンを、LED画面に表示します。",
  "basic.showIcon|param|icon": "定義済みのアイコンの番号",
  "basic.showIcon|param|interval": "アイコンを表示する時間（ミリ秒）。省略したときの値は600です。",
  "basic.showLeds": "LED画面に画像を表示します。",
  "basic.showLeds|param|interval": "描画のあとにひと休みする時間（ミリ秒）",
  "basic.showLeds|param|leds": "点灯・消灯させるLEDのパターン",
  "basic.showNumber": "画面上のに数字をスクロールさせます。数が1桁で、画面上に収まる場合、スクロールしません。",
  "basic.showNumber|param|interval": "スクロールの速度。たとえば：150、100、200、-100",
  "basic.showString": "一度に1文字ずつ、テキストを画面に表示します。1文字だけの場合は、スクロールしません。",
  "basic.showString|param|interval": "文字を横スクロールさせる速度。たとえば：150、100、200、-100",
  "basic.showString|param|text": "LED画面に表示する文字列。たとえば「Hello!」",
  "control": "ランタイムおよびイベントユーティリティ",
  "control.inBackground": "コードをバックグラウンドで実行します。",
  "control.reset": "BBC micro:bitをリセットします。",
  "control.waitMicros": "現在の実行ファイバーを、指定された時間だけ停止します（マイクロ秒）。",
  "control.waitMicros|param|micros": "待機する時間（マイクロ秒）。たとえば：4",
  "game": "LED1個のスプライトを使うゲームエンジン",
  "game.LedSprite": "LED1個で描かれるゲームスプライト",
  "game.LedSprite.blink": "スプライトの ``点滅`` の長さを報告します。",
  "game.LedSprite.brightness": "スプライトの``明るさ``をLED画面に報告します",
  "game.LedSprite.change": "スプライトのプロパティを変更します。",
  "game.LedSprite.changeBlinkBy": "``点滅``の長さを指定した長さ（ミリ秒）に変更します",
  "game.LedSprite.changeBlinkBy|param|ms": "TODO",
  "game.LedSprite.changeBrightnessBy": "``y``方向の位置を指定した値だけ変更します",
  "game.LedSprite.changeBrightnessBy|param|value": "明るさを変更する値",
  "game.LedSprite.changeDirectionBy": "指定した角度で``向き``を右方向に回転します",
  "game.LedSprite.changeDirectionBy|param|angle": "TODO",
  "game.LedSprite.changeXBy": "``x``方向の位置を指定した値だけ変更します",
  "game.LedSprite.changeXBy|param|x": "TODO",
  "game.LedSprite.changeYBy": "``y``方向の位置を指定した値だけ変更します",
  "game.LedSprite.changeYBy|param|y": "TODO",
  "game.LedSprite.change|param|property": "変更するプロパティの名前",
  "game.LedSprite.change|param|value": "変更する量。たとえば：1",
  "game.LedSprite.delete": "ゲームエンジンからスプライトを削除します。スプライトは画面に表示されたり、他のスプライトと連動したりすることはなくなります。",
  "game.LedSprite.direction": "スプライトの現在の方向を報告します。",
  "game.LedSprite.get": "スプライトのプロパティを取得します。",
  "game.LedSprite.get|param|property": "変更するプロパティの名前",
  "game.LedSprite.goTo": "画面上のこの位置に移動します。",
  "game.LedSprite.goTo|param|x": "TODO",
  "game.LedSprite.goTo|param|y": "TODO",
  "game.LedSprite.ifOnEdgeBounce": "ステージの端にあり、端の方向を向いている場合は向きを変えます。",
  "game.LedSprite.isTouching": "スプライトが指定したスプライトと同じ位置を持つ場合に真を報告します。",
  "game.LedSprite.isTouchingEdge": "スプライトが端にある場合に真を報告します。",
  "game.LedSprite.isTouching|param|other": "TODO",
  "game.LedSprite.move": "特定番号の LED を現在の方向に移動します。",
  "game.LedSprite.move|param|leds": "移動する LED の数。たとえば：1、-1",
  "game.LedSprite.off": "スプライトをオフにします（省略時はオン）。",
  "game.LedSprite.on": "スプライトをオンにします（省略時はオン）。",
  "game.LedSprite.set": "スプライトのプロパティを設定します。",
  "game.LedSprite.setBlink": "点滅間隔をミリ秒単位で設定します。",
  "game.LedSprite.setBlink|param|ms": "TODO",
  "game.LedSprite.setBrightness": "スプライトの ``明るさ`` を設定します",
  "game.LedSprite.setBrightness|param|brightness": "0 (オフ) から 255 (オン) までの明るさ。たとえば：255",
  "game.LedSprite.setDirection": "現在のスプライトの方向を 45 に最も近い倍数に丸めた値に設定します。",
  "game.LedSprite.setDirection|param|degrees": "TODO",
  "game.LedSprite.setX": "スプライトの位置の ``x`` 軸の値を設定します",
  "game.LedSprite.setX|param|x": "TODO",
  "game.LedSprite.setY": "スプライトの位置の ``y`` 軸の値を設定します",
  "game.LedSprite.setY|param|y": "TODO",
  "game.LedSprite.set|param|property": "変更するプロパティの名前",
  "game.LedSprite.turn": "スプライトを回転します。",
  "game.LedSprite.turnLeft": "左に回転（反時計回り）します。",
  "game.LedSprite.turnLeft|param|degrees": "TODO",
  "game.LedSprite.turnRight": "右に回転（時計回り）します。",
  "game.LedSprite.turnRight|param|degrees": "TODO",
  "game.LedSprite.turn|param|degrees": "回転する角度。たとえば、45、90、180、135",
  "game.LedSprite.turn|param|direction": "左または右",
  "game.LedSprite.x": "LED画面上のスプライトの位置の``x``軸の値を返します。",
  "game.LedSprite.y": "LED画面上のスプライトの位置の``y``軸の値を返します。",
  "game.addLife|param|lives": "TODO",
  "game.addScore": "点数を増減し、ちょっとしたアニメーションを表示します。",
  "game.addScore|param|points": "増減する点数（マイナスなら減らす）。たとえば：1",
  "game.gameOver": "ゲームオーバーのアニメーションと点数を表示します。",
  "game.isPaused": "ゲームの画面表示を一時停止していて、他のアニメーションが可能であるかどうかを示します。",
  "game.pause": "ゲームの画面表示を一時停止して、他のアニメーションの表示を可能にします。",
  "game.removeLife|param|life": "TODO",
  "game.resume": "ゲームの画面表示を再開します。",
  "game.score": "現在の点数を返します。",
  "game.setLife|param|value": "TODO",
  "game.setScore": "現在の点数を設定します。",
  "game.setScore|param|value": "新しい点数",
  "game.startCountdown": "ゲーム開始を示すアニメーションを表示し、カウントダウンタイマーを開始します。カウントダウンタイマーがゼロになると、ゲームオーバーです。",
  "game.startCountdown|param|ms": "ゲームオーバーまでの時間数（ミリ秒）。たとえば：10000",
  "images": "LED画像の作成、操作と表示。",
  "images.createBigImage": "LED画面2個ぶんの画像を作成する。",
  "images.createImage": "LED画面の大きさの画像を作成する。",
  "input": "センサーからのイベントとデータ",
  "input.acceleration": "加速度値を取得します。（スクリーンを上に向けて置いたとき、xは0、yも0、zは-1024です）",
  "input.acceleration|param|dimension": "TODO",
  "input.buttonIsPressed": "``A`` か ``B`` のボタンが押されているかを取得します。",
  "input.buttonIsPressed|param|button": "どのボタンの状態を調べるか。たとえば：Button.A",
  "input.calibrate": "廃止。代わりにinput.calibrateCompassを使ってください。",
  "input.compassHeading": "現在の、コンパスの値を取得します。",
  "input.lightLevel": "LEDスクリーンに当たる光の明るさを 0 (暗い) から 255 (明るい)の範囲で取得します。",
  "input.magneticForce": "磁力の大きさをマイクロテスラ（``µT``）で返します。この機能は、シミュレーターでは動作しません。",
  "input.magneticForce|param|dimension": "TODO",
  "input.onButtonPressed": "ボタン（``A``、``B``または``AとB``の両方）が押されたときに実行されます。",
  "input.onButtonPressed|param|body": "イベントが発生したときに実行するコード",
  "input.onButtonPressed|param|button": "押す必要のあるボタン",
  "input.onGesture": "ジェスチャ（例えば、ゆさぶる）が行われたときに実行します。",
  "input.onGesture|param|body": "ジェスチャーが行われたときに実行するコード",
  "input.onGesture|param|gesture": "どのジェスチャーが行われるのを待つか。たとえば：Gesture.Shake",
  "input.onLogoDown": "ロゴが下向きで、ボードが垂直の場合に実行するコードを登録します。",
  "input.onLogoDown|param|body": "TODO",
  "input.onLogoUp": "ロゴが上向きで、ボードが垂直の場合に実行するコードを登録します。",
  "input.onLogoUp|param|body": "TODO",
  "input.onPinPressed": "端子がタッチされ、ふたたびタッチされなくなったときに何かを実行します（同時にGND端子にもさわっている必要があります）。",
  "input.onPinPressed|param|body": "端子がタッチされたときに実行するコード",
  "input.onPinPressed|param|name": "タッチされる端子。たとえば：TouchPin.P0",
  "input.onPinReleased": "端子がタッチされなくなったときに実行されます。",
  "input.onPinReleased|param|body": "端子がタッチされなくなったときに実行するコード",
  "input.onPinReleased|param|name": "タッチされなくなる端子。たとえば：TouchPin.P0",
  "input.onScreenDown": "LED画面が下向きの場合に実行するコードを登録します。",
  "input.onScreenDown|param|body": "TODO",
  "input.onScreenUp": "LED画面が上向きの場合に実行するコードを登録します。",
  "input.onScreenUp|param|body": "TODO",
  "input.onShake": "ゆさぶられた場合に実行するコードを登録します。",
  "input.onShake|param|body": "TODO",
  "input.pinIsPressed": "端子がタッチされているかどうかの状態を取得します。タッチされているかを調べるために、同時にGNDにもさわっている必要があります。",
  "input.pinIsPressed|param|name": "タッチを検出する端子。たとえば：TouchPin.P0",
  "input.rotation": "デバイスの、ピッチかロールを度数で取得します。",
  "input.rotation|param|kind": "TODO",
  "input.runningTime": "電源が入ってから経過したミリ秒数を取得します。",
  "input.runningTimeMicros": "電源が入ってから経過したマイクロ秒数を取得します。",
  "input.setAccelerometerRange": "加速度センサーの計測範囲を重力加速度の単位で設定します。",
  "input.setAccelerometerRange|param|range": "加速度センサーが計測できる最大値を示す値",
  "input.temperature": "摂氏で、温度を取得します。",
  "led": "LED画面の制御",
  "led.brightness": "画面の明るさを 0 (オフ) 255 (フルに明るい)の範囲で取得します。",
  "led.displayMode": "現在の表示モード（白黒あるいはグレースケール）を取得します。",
  "led.enable": "画面を表示、または非表示にします。",
  "led.fadeIn": "LED画面をゆっくり明るくする。",
  "led.fadeIn|param|ms": "TODO",
  "led.fadeOut": "LED画面をゆっくり暗くする。",
  "led.fadeOut|param|ms": "TODO",
  "led.plot": "X、Y座標で指定したLEDを点灯します。(0, 0)が左上です。",
  "led.plotAll": "全てのLEDを点灯させる。",
  "led.plotBarGraph": "値（`value`）と最大値（`high`）に基づいて、縦方向の棒グラフを表示する。最大値がゼロの場合には、実際の表示に使用する最大値は自動的に調整されます。",
  "led.plotBarGraph|param|high": "最大値。ゼロの場合には、最大値は自動的に調整されます。たとえば：0",
  "led.plotBarGraph|param|value": "表示する値",
  "led.plotBrightness": "X、Y座標 (X は横方向、Y は縦方向) で指定したLEDを指定の明るさで点灯します。(0, 0) が左上です。",
  "led.plotBrightness|param|brightness": "0（オフ）から255（明るい）までの明るさ。たとえば：255",
  "led.plotBrightness|param|x": "TODO",
  "led.plotBrightness|param|y": "TODO",
  "led.plot|param|x": "TODO",
  "led.plot|param|y": "TODO",
  "led.point": "X、Y座標で指定されたLEDの、ON/OFFの状態を取得します。(0,0)が左上です。",
  "led.point|param|x": "TODO",
  "led.point|param|y": "TODO",
  "led.screenshot": "LED画面の状態を記録し、画像として返します。",
  "led.setBrightness": "画面の明るさを 0 (オフ) 255 (フルに明るい)の範囲で設定します。",
  "led.setBrightness|param|value": "明るさの値。たとえば：255、127、0",
  "led.setDisplayMode": "LED画面をの表示モードを、白黒とグレースケールのいずれかに設定します。",
  "led.setDisplayMode|param|mode": "指定する表示モード",
  "led.stopAnimation": "現在のアニメーションをキャンセルし、保留中のアニメーションもクリアします。",
  "led.toggle": "指定された場所のLEDの点滅を切り替えます。",
  "led.toggleAll": "LED画面を反転します。",
  "led.toggle|param|x": "TODO",
  "led.toggle|param|y": "TODO",
  "led.unplot": "X、Y座標で指定された場所のLEDを消灯します。(0, 0) は左上です。",
  "led.unplot|param|x": "TODO",
  "led.unplot|param|y": "TODO",
  "music": "音楽のための音の生成",
  "music.beat": "拍の長さをミリ秒で返します",
  "music.beginMelody": "メロディの再生を開始します。メロディは、「音階[オクターブ][:長さ]」の組み合わせを複数個文字列に入れた形で表します（「[  ]」で囲んだ部分は省略可能という意味、「[  ]」そのものは使わない）。",
  "music.beginMelody|param|melodyArray": "再生するメロディの入っている配列。たとえば：['g5:1']",
  "music.beginMelody|param|options": "メロディのオプション。1回だけまたはずっと。フォアグラウンドまたはバックグラウンド。",
  "music.builtInMelody": "元から入っているメロディを取り出す。",
  "music.changeTempoBy": "テンポを指定した数だけ増減します。",
  "music.changeTempoBy|param|bpm": "テンポ（1分間の拍数）を増減させる度合い。たとえば：20",
  "music.noteFrequency": "音符の周波数を返します。",
  "music.noteFrequency|param|name": "音符の名前。たとえば：Note.C",
  "music.onEvent": "メロディに関するいろいろなイベントが発生したときに行う動作を登録します。",
  "music.playTone": "指定された長さの間、``P0``端子を使って音を出します。",
  "music.playTone|param|frequency": "出す音の周波数（Hz）",
  "music.playTone|param|ms": "音の長さ（ミリ秒）",
  "music.rest": "``P0``端子で、指定された時間だけ音を出さないようにします。",
  "music.rest|param|ms": "残り時間(ミリ秒)",
  "music.ringTone": "``P0``端子を使って音を出します。",
  "music.ringTone|param|frequency": "出す音の周波数（Hz）",
  "music.setPlayTone": "メロディを再生する際に使用する、音を出す関数を独自に設定します。",
  "music.setTempo": "テンポを設定します",
  "music.setTempo|param|bpm": "新しいテンポ（1分間の拍数）の値。たとえば：120",
  "music.tempo": "現在のテンポを、1分間あたりの拍数で返します。テンポの値が大きくなると、より早く音楽が再生されます。",
  "parseInt": "文字列を整数に変換します。",
  "pins": "入出力端子を、アナログ信号、デジタル信号、サーボ、I2Cなどとして使用する",
  "pins.analogPitch": "音を鳴らす端子に、パルス幅変調（PWM）の信号を出力する。音を鳴らす端子を選ぶには、「`analog set pitch pin`」を使ってください。",
  "pins.analogPitch|param|frequency": "変調周波数（Hz）",
  "pins.analogPitch|param|ms": "音の長さ（ミリ秒）",
  "pins.analogReadPin": "端子に来ている電圧を、0～1023の範囲の値として読み取る。",
  "pins.analogReadPin|param|name": "出力先の端子。たとえば：AnalogPin.P0",
  "pins.analogSetPeriod": "アナログ出力のパルス幅変調の周期を、マイクロ秒（1/1000ミリ秒）単位で設定する。\nこの端子がアナログ出力に設定（「`analog write pin`」で）されていない場合は、この操作は無視されます。",
  "pins.analogSetPeriod|param|micros": "パルス幅変調の周期。たとえば：20000",
  "pins.analogSetPeriod|param|name": "周期を設定するアナログ出力端子。たとえば：AnalogPin.P0",
  "pins.analogSetPitchPin": "音を鳴らす、あるいは音楽に使用する端子を設定します。",
  "pins.analogSetPitchPin|param|name": "音の信号を出力する端子",
  "pins.analogWritePin": "端子に出力する電圧を、0～1023の範囲の値として設定する。",
  "pins.analogWritePin|param|name": "出力先の端子。たとえば：AnalogPin.P0",
  "pins.analogWritePin|param|value": "出力する電圧を示す、0～1023の範囲の値。たとえば：1023、0",
  "pins.digitalReadPin": "端子に来ている電圧を、0か1として読み取る。",
  "pins.digitalReadPin|param|name": "読み取る端子。たとえば：DigitalPin.P0",
  "pins.digitalWritePin": "端子に出力する電圧を、0か1で設定する。",
  "pins.digitalWritePin|param|name": "出力先の端子。たとえば：DigitalPin.P0",
  "pins.digitalWritePin|param|value": "設定する値。たとえば：0、1",
  "pins.i2cReadNumber": "7ビットのI2Cアドレスを指定して、1個の数値を読み込む。",
  "pins.i2cWriteNumber": "7ビットのI2Cアドレスを指定して、1個の数値を書き込む。",
  "pins.map": "数値を、ある範囲から別の範囲にマップします。つまり、数値が``元の下限``なら``結果の下限``に変換され、``元の上限``なら``結果の上限``に変換され、間の値なら間の値に変換されます。",
  "pins.map|param|fromHigh": "元の値の上限。たとえば：1023",
  "pins.map|param|fromLow": "元の値の下限。",
  "pins.map|param|toHigh": "結果の値の上限。たとえば：4",
  "pins.map|param|toLow": "結果の値の下限。",
  "pins.map|param|value": "変換する、元の値。",
  "pins.onPulsed": "この端子をデジタル入力に設定し、正パルスまたは負パルスが入力されたときにイベントを発生します。このとき、イベントのタイムスタンプには、パルスの長さの値が入っています。",
  "pins.onPulsed|param|name": "変化を調べるデジタル端子。たとえば：DigitalPin.P0",
  "pins.onPulsed|param|pulse": "パルスの種類。たとえば：PulseValue.High",
  "pins.pulseDuration": "最後に受け取ったパルスの長さを、マイクロ秒単位で返します。この関数は、``onPulsed``ハンドラーの中で呼び出す必要があります。",
  "pins.pulseIn|param|name": "変化を調べるデジタル端子。たとえば：DigitalPin.P0",
  "pins.pulseIn|param|value": "パルスの種類。たとえば：PulseValue.High",
  "pins.servoSetPulse": "この入出力端子を、アナログ（PWM）出力に設定し、PWMの周期を20ミリ秒に設定し、パルスの幅の標準値をマイクロ秒（1/1000ミリ秒）単位で設定します。",
  "pins.servoSetPulse|param|micros": "パルスの幅。たとえば：1500",
  "pins.servoSetPulse|param|name": "端子",
  "pins.servoWritePin": "サーボに対して、シャフトの動きを数値で指示します。通常の模型用サーボモーターでは、この数値はシャフトが向くべき角度です。回転サーボでは、シャフトの回転速度です（``0``ならある方向に最大速度、``180``なら反対方向に最大速度、``90``近くの値なら停止）。",
  "pins.servoWritePin|param|name": "出力先の端子。たとえば：AnalogPin.P0",
  "pins.servoWritePin|param|value": "角度または回転速度。たとえば：180、90、0",
  "pins.setEvents": "この端子から発生するイベントを設定します。イベントを受け取るには、``control.onEvent()``関数を使ってください。",
  "pins.setEvents|param|name": "イベントモードを設定する対象の端子。たとえば：DigitalPin.P0",
  "pins.setEvents|param|type": "この端子が発生するイベントの種類。たとえば：PinEventType.Edge",
  "pins.setPull": "この端子をプルアップするか、プルダウンするかを設定します。",
  "pins.setPull|param|name": "プルアップまたはプルダウンを設定する端子。たとえば：DigitalPin.P0",
  "pins.setPull|param|pull": "プルアップ、プルダウン、開放のいずれかのモード。たとえば：PinPullMode.PullUp",
  "pins.spiFormat": "SPIのビット数とモードを設定します。",
  "pins.spiFormat|param|bits": "ビット数。たとえば：8",
  "pins.spiFormat|param|mode": "モード。たとえば：3",
  "pins.spiFrequency": "SPIの周波数を設定します。",
  "pins.spiFrequency|param|frequency": "クロック周波数。たとえば：1000000",
  "pins.spiPins": "SPIのMOSI、MISO、SCKの各機能でどの端子を使うかを設定します。",
  "pins.spiWrite": "SPIのスレーブに対してデータを送信し、受け取った応答を返します。",
  "pins.spiWrite|param|value": "SPIのスレーブに対して送信するデータ。",
  "serial": "シリアル接続を使ってデータを送受信する。",
  "serial.onDataReceived": "区切り文字として指定された文字のいずれかがみつかったときに行う動作を登録します。",
  "serial.onDataReceived|param|delimiters": "受信した文字と照らし合わせる区切り文字（1文字以上）",
  "serial.readBuffer": "rxBuffから複数の文字を読み取り、バッファーに格納します。",
  "serial.readBuffer|param|length": "省略時のバッファーの長さ（たとえば64）",
  "serial.readLine": "シリアルポートからテキストを読み取ります。",
  "serial.readString": "シリアルポートから読み取れる文字を読み取り、文字列として返します。",
  "serial.readUntil": "シリアルポートから文字を読み取り、区切り文字として指定された文字のいずれかがみつかったら、それより手前の文字を文字列として返します。",
  "serial.readUntil|param|delimiter": "文字のかたまりを区切る区切り文字が、1文字以上入っている文字列",
  "serial.redirect": "シリアル通信でUSBTXおよびUSBRX以外の端子を使うように、動的に変更する。",
  "serial.redirectToUSB": "シリアル通信の入出力を USB 接続にリダイレクトします。",
  "serial.redirect|param|rate": "新しい通信速度。たとえば：115200",
  "serial.redirect|param|rx": "新しい受信端子。たとえば：SerialPin.P1",
  "serial.redirect|param|tx": "新しい送信端子。たとえば：SerialPin.P0",
  "serial.writeBuffer": "バッファーの内容をシリアル通信で書き出します。",
  "serial.writeLine": "文字列1行をシリアル通信で送信する。",
  "serial.writeNumber": "数値をシリアル通信で送信する。",
  "serial.writeString": "文字列をシリアル通信で送信する。",
  "serial.writeValue": "「名前：値」の組み合わせを、シリアル通信で送信する。",
  "serial.writeValue|param|name": "値の名前。たとえば：x",
  "serial.writeValue|param|value": "送信する値。"
}