{
  "bluetooth": "Support for additional Bluetooth services.\n\nSupport for additional Bluetooth services.",
  "bluetooth.advertiseUrl": "Advertise an Eddystone URL",
  "bluetooth.advertiseUrl|param|connectable": "true to keep bluetooth connectable for other services, false otherwise.",
  "bluetooth.advertiseUrl|param|power": "power level between 0 and 7, eg: 7",
  "bluetooth.advertiseUrl|param|url": "the url to transmit. Must be no longer than the supported eddystone url length, eg: \"https://pxt.io/\"",
  "bluetooth.onBluetoothConnected": "Register code to run when the micro:bit is connected to over Bluetooth",
  "bluetooth.onBluetoothConnected|param|body": "Code to run when a Bluetooth connection is established",
  "bluetooth.onBluetoothDisconnected": "Register code to run when a bluetooth connection to the micro:bit is lost",
  "bluetooth.onBluetoothDisconnected|param|body": "Code to run when a Bluetooth connection is lost",
  "bluetooth.setTransmitPower": "Sets the bluetooth transmit power between 0 (minimal) and 7 (maximum).",
  "bluetooth.setTransmitPower|param|power": "power level between 0 (minimal) and 7 (maximum), eg: 7.",
  "bluetooth.startAccelerometerService": "Starts the Bluetooth accelerometer service",
  "bluetooth.startButtonService": "Starts the Bluetooth button service",
  "bluetooth.startIOPinService": "Starts the Bluetooth IO pin service.",
  "bluetooth.startLEDService": "Starts the Bluetooth LED service",
  "bluetooth.startMagnetometerService": "Starts the Bluetooth magnetometer service",
  "bluetooth.startTemperatureService": "Starts the Bluetooth temperature service",
  "bluetooth.startUartService": "Starts the Bluetooth UART service",
  "bluetooth.stopAdvertising": "Stops advertising Eddystone end points",
  "bluetooth.uartReadUntil": "Reads from the Bluetooth UART service buffer, returning its contents when the specified delimiter character is encountered.",
  "bluetooth.uartWriteNumber": "Prints a numeric value to the serial",
  "bluetooth.uartWriteString": "Writes to the Bluetooth UART service buffer. From there the data is transmitted over Bluetooth to a connected device.",
  "bluetooth.uartWriteValue": "Writes a ``name: value`` pair line to the serial.",
  "bluetooth.uartWriteValue|param|name": "name of the value stream, eg: x",
  "bluetooth.uartWriteValue|param|value": "to write"
}